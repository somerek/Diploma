# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
# test1

stages: # List of stages for jobs, and their order of execution
  - scan
  - build
  - deploy-dev
  - deploy-prod

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
# sonarcloud-check:
#   stage: scan
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - sonar-scanner -Dsonar.qualitygate.wait=true
#   allow_failure: false
#   only:
#     - merge_requests
#     - develop
#     - main
#     - dev

services:
  - docker:dind

build-job: # This job runs in the build stage, which runs first.
  stage: build
  image: docker
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build --cache-from $CI_REGISTRY_IMAGE/backend:latest --tag $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/backend:latest backend
    - docker push $CI_REGISTRY_IMAGE/backend --all-tags
    - docker build --cache-from $CI_REGISTRY_IMAGE/frontend:latest --tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE/frontend:latest frontend
    - docker push $CI_REGISTRY_IMAGE/frontend --all-tags
    - echo "Compiling the code..."
    - echo "Compile complete."

deploy-dev:
  stage: deploy-dev
  image: alpine
  before_script:
    - apk add --no-cache git curl bash
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - mv kustomize /usr/local/bin/
    - git remote set-url origin https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/somerek/music_page.git
    - git config --global user.email "gitlab@gitlab.com"
    - git config --global user.name "GitLab CI/CD"
  script:
    - echo $CI_COMMIT_BRANCH
    - git checkout -B $CI_COMMIT_BRANCH
    - cd deployment/dev
    - kustomize edit set image $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - kustomize edit set image $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - cat kustomization.yaml
    - git commit -am '[skip ci] DEV image update'
    - git pull origin $CI_COMMIT_BRANCH
    - git push origin $CI_COMMIT_BRANCH
  only:
    - main
    # - dev

deploy-prod:
  stage: deploy-prod
  image: alpine
  before_script:
    - apk add --no-cache git curl bash
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - mv kustomize /usr/local/bin/
    - git remote set-url origin https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/somerek/music_page.git
    - git config --global user.email "gitlab@gitlab.com"
    - git config --global user.name "GitLab CI/CD"
  script:
    - git checkout -B main
    - git pull origin main
    - cd deployment/prod
    - kustomize edit set image $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - kustomize edit set image $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - cat kustomization.yaml
    - git commit -am '[skip ci] PROD image update'
    - git push origin main
  only:
    - main
  when: manual
